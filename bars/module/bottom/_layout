#!/usr/bin/env sh
#
# DESCRIPTION:
#   Get tags of dwm.
#
# DEPENDENCIES:
#   dwm
#   dwm-msg
#
# MAINTAINER: (s)
#   GPL3 ðŸ„¯ BeyondMagic <koetemagie/gmail.com> 2021-


icon_selected=" $(xgetres bars.tags.selected)"
icon_selected_occupied=" $(xgetres bars.tags.selected.occupied)"
icon_unselect=" $(xgetres bars.tags.unselect)"
icon_unselect_occupied=" $(xgetres bars.tags.unselect.occupied)"

affix="$(xgetres bars.separator1)"
rv_affix="$(xgetres bars.separator2)"

_get_tags() {

  # A local function to shout out a tag name based
  # on their IDs, you can change it to whatever
  # you want to
  get_name_of_tag() {

    # bring case to here
    case $selected in
      1)   name="$name0" ;;
      2)   name="$name1" ;;
      4)   name="$name2" ;;
      8)   name="$name3" ;;
      16)  name="$name4" ;;
      32)  name="$name5" ;;
      64)  name="$name6" ;;
      128) name="$name7" ;;
      256) name="$name8" ;;
      511) name="$name9" ;;
    esac
    
    # Change to your notify program, I recommend a lot xnotify though;
    # Pretty lightweight!
    # HACK: using zsh echo built-in to read the UNICODE UTF-32BE characters
    zsh -c "echo -ne '$(printf "$name" | sed -r 's/U\w{8}/\\&/g')'" > "$XNOTIFY_FIFO" &
    
  }


  dwm-msg --ignore-reply subscribe tag_change_event |
  jq --unbuffered '.tag_change_event.new_state | .selected, .occupied' |
  while IFS=$'\n' read -r selected && read -r occupied; do 

    set noadd

    # Loop through all the 9 tags
    # It starts from 0
    out=""; tag=0; while [ $tag -le 8 ]; do

      case $tag in
        0) name="1" ; icon="ï‰©";;
        1) name="2" ; icon="îž•";;
        2) name="3" ; icon="ï€½";;
        3) name="4" ; icon="ïžŸ";;
        4) name="5" ; icon="ï€„";;
        5) name="6" ; icon="ïž¯";;
        6) name="7" ; icon="ïƒ­";;
        7) name="8" ; icon="ï€¾";;
        8) name="9" ; icon="îˆ—";;
      esac

      # Does this really needs any explanation?
      bit=$((1 << $tag))
      click_button="%{A1:execute dwm-msg run_command view ${bit}:}"
      #hover_button="%{A6:execute dash "$SCRIPTS_FOLDER"/bars/bottom/__preview_tag $bit:}"
      #unhover_button="%{A7:execute dash "$SCRIPTS_FOLDER"/bars/bottom/__preview_tag close:}"
      buttons="${click_button}"

      # Selected and with programs
      if [ $(($selected & $bit)) -ne 0 ] && [ $(($occupied & $bit)) -ne 0 ]; then
        # Pretty output (with external variables)
        out="${out}%{F$fg_selected_occupied}$buttons $icon$name %{A1}"
        # Simple output
        # out="${out} X"

        noadd="$((1 << ($tag + 1)))"

        [ $name = 9 ] && unset noadd

      # Selected without programs
      elif [ $(($selected & $bit)) -ne 0 ]; then
        # Pretty output (with external variables)
        out="${out}%{F$fg_selected}$buttons $icon$name %{A1}"
        # Simple output
        # out="${out} o"

        unset noadd

      # Not selected with programs
      elif [ $(($occupied & $bit)) -ne 0 ]; then
        # Pretty output (with external variables)
        out="${out}%{F$fg_unselect}$buttons $icon$name %{A1}"
        # Simple output
        # out="${out} +"

        noadd="$((1 << ($tag + 1)))"

        [ $name = 9 ] && unset noadd

      # Nothing at all
      fi #else
        # Pretty output (with external variables)
        #out="${out}%{F$fg_unselect_all}$buttons $icon_unselect_occupied$name %{A1}"
        # Simple output
        # out="${out} -"
        :
      #fi

    tag=$((tag+1)); done

    [ $noadd ] && noadd="%{F$fg_selected_occupied}%{A1:execute dwm-msg run_command view $noadd:}+%{A1}"
    out="$out$noadd"

    #kill $!
    
    # If the last select is the same as the one right now, then does not print
    # out anything
    [ "$last_selected" = "$selected" ] || {

      # Give a quick notification
      get_name_of_tag "$selected" &
      
    }

    # Define last selected to be used on the next tag change
    last_selected="$selected"


    # Pretty output (with external variables)
    echo 'W' "%{T3}%{B$bg_tags}$out  %{F$bg_tags}%{B-}"
    # Simple output
    # echo 'W' "$out"

  done
  
}



# Layout of the tag, the symbol that appears can be changed
_get_layout() {

  # Loop through every change and wait for the next one :)
  # If it breaks, see the last comments!
  dwm-msg --ignore-reply subscribe layout_change_event | \
    grep --line-buffered -oP '(?<=new_symbol": ").*' | \
    sed -u 's/",$//' | \
    while IFS=$'\n' read -r tagid; do

      # Beautify with colours, I recommend using the later one if
      # you don't have idea where the rest of the colours/variables come
      echo 'L' "%{O-5 B$layout_bg F$layout_fg}%{T1}   $tagid  %{F$bg_tags B$layout_bg}%{F-}"

      # Simple output
      # echo 'L' "$tagid"

    done

  # Just a little warning that well, something died!
  # This is necessary because the loop isn't supposed to break,
  # however, it does when dwm is killed or restarted.
  # So this resets it!
  echo "DWM died, resetting connection in 5 seconds"; sleep 3

  # Execute itself and/by killing this
  exec "$SCRIPTS_FOLDER/bars/module/bottom/_layout" 'run'

}

[ "$1" = "run" ] && {

  . "$SCRIPTS_FOLDER"/bars/config
  _get_layout &
  _get_tags

}
