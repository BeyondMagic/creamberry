#!/usr/bin/env sh
#
# DESCRIPTION: 
#   Two lemonbars with fifo, events as well
#   very lightweight, and low CPU usage
#
# NOTE: 
#   Low ram usage (30Mi)
#   This uses external fonts
#   The size of the bar is compatible with my monitor, change
#     for your needs
#   It's recommended to change the location of fifos as well
#   And icons for scripts
#   It's recommended to use dash to run this (link sh to dash),
#     since it will be way faster
#
# DEPENDENCIES: 
#   Xorg
#   dash
#   xdotools
#   lemonbar (or forks that have fontconfig, clickable, hover in and out events)
#   sensors
#   lm_sensors ; sensors
#   notify-send
#   xnotify
#   mpd
#     mpc
#   dwm
#     dwm-msg
#
# TODO:
#   1. Make a better documentation for the lemonbars as people may need help with it.
#   2. View small preview with nsxiv. (scrot for screenshot)
#
# NOTE: ENVIRONMENT VARIABLES
#   BARS_TOP_FIFO    : /tmp/bottom.fifo
#   BARS_BOTTOM_FIFO : /tmp/top.fifo
#   SCRIPTS_FOLDER   : Origin of this script.
#
# MAINTAINER: (s)
#   GPL3 Â©  BeyondMagic <koetemagie/gmail.com> 2021-

# ---------------------------------------------------------------------------------------------

# NOTE: 1: Constant of the fo1lder of this script being run, modules will use it.
#origin="$(cd -- "$(dirname "$0")" >/dev/null 2>&1 && pwd -P)" <-- This will find it without environment variables.
origin="$SCRIPTS_FOLDER"/bars/

# NOTE: 2: Clean old processes of this bar, so just call it to kill all lemonbars.
# HACK : Make it cleaner and exact.
[ "$(pgrep lemonbar | wc -l)" -gt 0 ] && {
  rm -rf "$location_of_bottom_fifo" "$location_of_top_fifo" 

  pkill -9 -f "lemonbar -H "
  pgrep -f "sh $origin" | \
    while read -r id; do
      pkill -9 -P "$id"
      kill -9 "$id"
    done

  exit 0
}

# ---------------------------------------------------------------------------------------------

{
  # NOTE: 3: Get colours and XResources config.
  . "$origin"/config

  # NOTE: 4: Constants of Fonts
  #   Each font is beautifully chosen, we get them from xgetres (XResources source).
    normal_font="$(xgetres bars.font.normal)"
      bold_font="$(xgetres bars.font.bold)"
     emoji_font="$(xgetres bars.font.emoji)"
  material_font="$(xgetres bars.font.material)"

  # NOTE: 5: Get paths of fifos to transform
  #   Constants of FIFOs paths to create as we will use them to send information of our modules.
  [ "$BARS_TOP_FIFO"] && [ "$BARS_BOTTOM_FIFO" ] && {

    location_of_bottom_fifo="$BARS_BOTTOM_FIFO"
       location_of_top_fifo="$BARS_TOP_FIFO"

  } || {
    
    location_of_bottom_fifo="/tmp/bottom.fifo"
       location_of_top_fifo="/tmp/top.fifo"
  }

  # NOTE: 6: Start fifos.
  mkfifo "$location_of_bottom_fifo" "$location_of_top_fifo"
  exec 3<> "$location_of_bottom_fifo"; exec 3<> "$location_of_top_fifo"
}


# ---------------------------------------------------------------------------------------------


# NOTE: 7: Read function of our top bar. [MODULES]
read_top_bar() {
  
  # NOTE: 7.1: Send information only when a function sends something.
  while read -r line; do
    case $line in

      # Clock [./top/_clock]
      C*)
        clock="${line#?}";;

      # Sensors of CPU [./top/_sensors]
      S*)
        sensors="${line#?}";;

      # Power icon [./top/_power]
      P*)
        power="${line#?}";;

      # Music [./top/_song]
      M*)
        music="${line#?}";;

      # Sound [./top/_sound]
      T*)
        sound="${line#?}";;

    esac

    # NOTE: 7.2: Print information to our fifo.
    printf "%s%s%s\n" "$clock  %{F-}%{B-}$sensors%{c}$music%{r}$sound  $power"

  done < "$location_of_top_fifo" 
}

# NOTE: 8: Read function of our bottom bar. [MODULES]
read_bottom_bar() {
  
  # NOTE: 8.1: Send information only when a function sends something.
  while read -r line; do
    case $line in
    
      # Title of Current Window
      T*)
        title="${line#?}";;

      # Tags
      W*)
        tags="${line#?}";;

      # Layouts
      L*)
        layouts="${line#?}";;

      M*)
        memory="${line#?}";;

      # Record/Utilities
      R*)
        record="${line#?}";;

    esac

    # NOTE: 8.2: Print information to our fifo.
    printf "%s%s%s\n" "$layouts%{T3}$tags%{T1}%{c}$title%{r}$record$memory$nickname"

   done < "$location_of_bottom_fifo"  
}

# ---------------------------------------------------------------------------------------------

# NOTE: 9: Finally starts top bar lemonbar as it reads from the top bar.
#   While loop is used to execute commands, e.j: when you click in a module the information is,
#   sent to lemonbar, but YOU must do something with it. In this case, executing it.
read_top_bar | lemonbar -H -p -g "$(xgetres bars.top.geometry)" \
  -B "$bg_bar" \
  -F "$fg_bar" \
  -o 0 -f "$normal_font" \
  -o 0 -f "$bold_font" \
  -o 1 -f "$emoji_font" \
  -o 0 -f "$material_font" \
	| while read -r line; do
    [ $(echo "$line" | awk '{print $1}') = 'execute' ] && {
      line="$(echo "$line" | sed -r 's/^execute //')"
      eval "$line"
    }
  done &

# NOTE: 10: Finally starts bottom bar lemonbar as it reads from the top bar.
#   While loop is used to execute commands, e.j: when you click in a module the information is,
#   sent to lemonbar, but YOU must do something with it. In this case, executing it.
read_bottom_bar | lemonbar -H -b -p -g "$(xgetres bars.bottom.geometry)" \
  -B "$bg_bar" \
  -F "$fg_bar" \
  -o 0 -f "$normal_font" \
  -o 0 -f "$bold_font" \
  -o 1 -f "$emoji_font" \
  -o -3 -f "$material_font" \
  -n "bottom_bar" \
  | while read -r line; do
    [ $(echo "$line" | awk '{print $1}') = 'execute' ] && {
      line="$(echo "$line" | sed -r 's/^execute //')"
      eval "$line"
    }
  done &

# ---------------------------------------------------------------------------------------------

# NOTE: 11: MODULES for top bar, you can disable all of them and activate just one to start.
# Load information on bars
{

  . "$origin"/bottom/_title;
  . "$origin"/bottom/_layout;
  . "$origin"/bottom/_memory;
  _get_layout & _get_tags &
  _get_ram &
  _get_active_window &

} > "$location_of_bottom_fifo"

# NOTE: 11: MODULES for bottom bar, you can disable all of them and activate just one to start.
{

  "$origin/"top/_song run &
  "$origin/"top/_sound run &
  . "$origin/"top/_clock
  . "$origin/"top/_power
  . "$origin/"top/_sensors
  _clock &
  _sensors &
  _get_power

} > "$location_of_top_fifo"

# ---------------------------------------------------------------------------------------------

# HACK: It toggles MPD for "./top/_song" read.
mpc toggle && mpc toggle
# HACK: It switches tag of DWM for "./bottom/_layout" read.
dwm-msg run_command view 128 && dwm-msg run_command view 1

# ---------------------------------------------------------------------------------------------

exit 0
