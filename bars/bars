#!/usr/bin/env sh
#
# DESCRIPTION: 
#   Two lemonbars with fifo, events as well
#   very lightweight, and low CPU usage
#
# NOTE: 
#   Low ram usage (30Mi)
#   This uses external fonts
#   The size of the bar is compatible with my monitor, change
#     for your needs
#   It's recommended to change the location of fifos as well
#   And icons for scripts
#   It's recommended to use dash to run this (link sh to dash),
#     since it will be way faster
#
# DEPENDENCIES: 
#   Xorg
#   dash
#   xdotools
#   lemonbar (or forks that have fontconfig, clickable, hover in and out events)
#   sensors
#   lm_sensors ; sensors
#   notify-send
#   xnotify
#   mpd
#     mpc
#   dwm
#     dwm-msg
#   imagemagick
#
# MAINTAINER: (s)
#   GPL3 Â©  BeyondMagic <koetemagie/gmail.com> 2021-




# Constants of Fonts
#   Each font is beautifully chosen :)
  normal_font="$(xgetres bars.font.normal)"
    bold_font="$(xgetres bars.font.bold)"
   emoji_font="$(xgetres bars.font.emoji)"
material_font="$(xgetres bars.font.material)"

# Constants of fifos to transfer information of functions
[ "$BARS_TOP_FIFO"] && [ "$BARS_BOTTOM_FIFO" ] && {

  location_of_bottom_fifo="$BARS_BOTTOM_FIFO"
     location_of_top_fifo="$BARS_TOP_FIFO"

} || {
  
  location_of_bottom_fifo="/tmp/bottom.fifo"
     location_of_top_fifo="/tmp/top.fifo"
}











# Start basic config:
#origin="$(cd -- "$(dirname "$0")" >/dev/null 2>&1 && pwd -P)"
origin="$SCRIPTS_FOLDER/bars/"

# Clean old processes of lemonbar.
[ "$(pgrep lemonbar | wc -l)" -gt 0 ] && {
  rm -rf "$location_of_bottom_fifo" "$location_of_top_fifo" 

  pkill -9 -f "lemonbar -H "
  pgrep -f "sh $origin" | \
    while read -r id; do
      pkill -9 -P "$id"
      kill -9 "$id"
    done
}

[ "$1" = "clean" ] && exit


# Start fifos
mkfifo "$location_of_bottom_fifo" "$location_of_top_fifo"
exec 3<> "$location_of_bottom_fifo"; exec 3<> "$location_of_top_fifo"

. $origin/config





read_top_bar() {
  while read -r line; do
    case $line in

      # Clock ( date )
      C*)
        clock="${line#?}";;

      # Sensors of CPU
      S*)
        sensors="${line#?}";;

      # Power icon
      P*)
        power="${line#?}";;

      # Music
      M*)
        music="${line#?}";;

      # Sound
      T*)
        sound="${line#?}";;

    esac

    printf "%s%s%s\n" "$clock  %{F-}%{B-}$sensors%{c}$music%{r}$sound  $power"

  done < "$location_of_top_fifo" 
}

# Function of the bottom bar for Lemonbar
#   Modules are:
read_bottom_bar() {
  while read -r line; do
    case $line in
    
      # Title of Current Window
      T*)
        title="${line#?}";;

      # Tags
      W*)
        tags="${line#?}";;

      # Layouts
      L*)
        layouts="${line#?}";;

      M*)
        memory="${line#?}";;

      # Record/Utilities
      R*)
        record="${line#?}";;

    esac

    printf "%s%s%s\n" "$layouts%{T3}$tags%{T1}%{c}$title%{r}$record$memory$nickname"

   done < "$location_of_bottom_fifo"  
}







read_top_bar | lemonbar -H -p -g "$(xgetres bars.top.geometry)" \
  -B "$bg_bar" \
  -F "$fg_bar" \
  -o 0 -f "$normal_font" \
  -o 0 -f "$bold_font" \
  -o 1 -f "$emoji_font" \
  -o 0 -f "$material_font" \
	| while read -r line; do
    [ $(echo "$line" | awk '{print $1}') = 'execute' ] && {
      line="$(echo "$line" | sed -r 's/^execute //')"
      eval "$line"
    }
  done &

read_bottom_bar | lemonbar -H -b -p -g "$(xgetres bars.bottom.geometry)" \
  -B "$bg_bar" \
  -F "$fg_bar" \
  -o 0 -f "$normal_font" \
  -o 0 -f "$bold_font" \
  -o 1 -f "$emoji_font" \
  -o -3 -f "$material_font" \
  -n "bottom_bar" \
  | while read -r line; do
    [ $(echo "$line" | awk '{print $1}') = 'execute' ] && {
      line="$(echo "$line" | sed -r 's/^execute //')"
      eval "$line"
    }
  done &





# Load information on bars
{

  . "$origin"/bottom/_title;
  . "$origin"/bottom/_layout;
  . "$origin"/bottom/_memory;
  _get_layout & _get_tags &
  _get_ram &
  _get_active_window &

} > "$location_of_bottom_fifo"

{

  "$origin/"top/_song run &
  "$origin/"top/_sound run &
  . "$origin/"top/_clock
  . "$origin/"top/_power
  . "$origin/"top/_sensors
  _clock &
  _sensors &
  _get_power

} > "$location_of_top_fifo"








mpc toggle && mpc toggle
dwm-msg run_command view 128 && dwm-msg run_command view 1

exit 0
