#!/usr/bin/env sh
#
# DESCRIPTION: 
#   Two lemonbars with fifo, events such hover and clicks as well
#   very lightweight, and low CPU usage.
#
# NOTE: 
#   Low ram usage (30Mi) for what it does...
#   This uses external fonts.
#   The size of the bar is compatible with my monitor, change for your needs.
#   It's recommended to use dash to run this (link sh to dash),
#     since it will be way faster.
#   This is supposed to be used with 1.
#   1 -> https://github.com/BeyondMagic/scripts/tree/master/bars/lemonbars
#
# DEPENDENCIES: 
#   Xorg
#   doas
#   dash
#   xdotools
#   lemonbar (or forks that have fontconfig, clickable, hover in and out events)
#   lm_sensors
#   notify-send.sh
#   xnotify
#   mpd
#     mpc
#   dwm
#     dwm-msg
#   config -> https://github.com/BeyondMagic/scripts/tree/master/bars/config
#
# TODO:
#   1. Make a better documentation for the lemonbars as people may need help with it.
#   2. View small preview with nsxiv. (scrot for screenshot)
#   3. Separate lemonbar launcher from bar scripts.
#
# NOTE: ENVIRONMENT VARIABLES
#   BARS_TOP_FIFO    : /tmp/bottom.fifo
#   BARS_BOTTOM_FIFO : /tmp/top.fifo
#   SCRIPTS_FOLDER   : Origin of this script.
#
# MAINTAINER: (s)
#   GPL3 ðŸ„¯ BeyondMagic <koetemagie/gmail.com> 2021-

# ---------------------------------------------------------------------------------------------

# NOTE: 1: Constant of the fo1lder of this script being run, modules will use it.
#origin="$(cd -- "$(dirname "$0")" >/dev/null 2>&1 && pwd -P)" <-- This will find it without environment variables.
origin="$SCRIPTS_FOLDER"/bars

# NOTE: 2: Clean old processes of this bar, so just call it to kill all lemonbars.
# HACK : Make it cleaner and exact.
[ "$(pgrep "sh ${origin}/module" | wc -l)" -gt 0 ] || [ "$1" = "clean" ] && {

  pgrep -f "sh ${origin}/module" | \
    while read -r id; do
      pkill -9 -P "$id"
      kill -9 "$id"
    done

  pkill -9 -f "sh ${origin}/module"

  exit 0
}

# ---------------------------------------------------------------------------------------------

# NOTE: 4: Get paths of fifos to send them information.
#   Constants of FIFOs paths to create as we will use them to send information of our modules.
[ "$BARS_TOP_FIFO" ] && [ "$BARS_BOTTOM_FIFO" ] && {

  location_of_bottom_fifo="$BARS_BOTTOM_FIFO"
     location_of_top_fifo="$BARS_TOP_FIFO"

} || {
  
  location_of_bottom_fifo="/tmp/bottom.fifo"
     location_of_top_fifo="/tmp/top.fifo"
}

exec 3<> "$location_of_top_fifo"; exec 3<> "$location_of_bottom_fifo"

# ---------------------------------------------------------------------------------------------

# NOTE: 5: Get colours and XResources config.
. "$origin"/config

# ---------------------------------------------------------------------------------------------

# NOTE: 6: MODULES for top bar, you can disable all of them and activate just one to start.
# Load information on bars
{

  . "$origin"/module/bottom/_title;
  . "$origin"/module/bottom/_layout;
  . "$origin"/module/bottom/_memory;
  _get_layout & _get_tags &
  _get_ram &
  _get_active_window &

} > "$location_of_bottom_fifo"

# NOTE: 7: MODULES for bottom bar, you can disable all of them and activate just one to start.
{

  "$origin"/module/top/_song run &
  "$origin"/module/top/_sound run &
  . "$origin"/module/top/_clock
  . "$origin"/module/top/_power
  . "$origin"/module/top/_sensors
  _clock &
  _sensors &
  _get_power

} > "$location_of_top_fifo"

# ---------------------------------------------------------------------------------------------

# HACK: It toggles MPD for "./top/_song" read.
mpc toggle && mpc toggle
# HACK: It switches tag of DWM for "./bottom/_layout" read.
dwm-msg run_command view 128 && dwm-msg run_command view 1

# ---------------------------------------------------------------------------------------------

exit 0
