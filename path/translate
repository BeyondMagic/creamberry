#!/usr/bin/env sh
#
# DESCRIPTION:
#   A simple translation tool that that relies on Iris as backend.
#
# DEPENDENCIES:
#   iris
#   notify-call
# 
# TODO:
#   notify-call -> eww
#
# João F. © BeyondMagic <koetemagie@gmail.com>

# 1.
case "$1" in

  en* )

    from='english'

    case "$2" in

      ja ) word='in Japanese' ;;

      pt ) word='in Portuguese' ;;

      ru ) word='in Russian' ;;

    esac

  ;;

  pt* )

    from='português'

    case "$2" in

      ja ) word='em Japonês' ;;

      en ) word='em Inglês' ;;

      ru ) word='em Russo' ;;

    esac

  ;;

  ja* )

    from='日本語'

    case "$2" in

      en ) word='英語' ;;

      pt ) word='ポルトガル語' ;;

      ru ) word='ロシア語' ;;

    esac

  ;;

  #ru* )

  #;;

esac

# 2. Make sure there's enough translation process.
if [ ! "$word" ] || [ ! "$from" ]; then

  echo 'You need at least two initial arguments: ranging itself from <en>, <ja>, <pt>, <ru>.'

  exit 1

fi

# 2.

  # I.
  notify () {

    # B.
    notify-call \
      --expire-time 15000 \
      --hint string:image-path:"$HOME/.local/share/icons/banana.png" \
      "$1" \
      "$2"

  }

  # II.
  clean () {

    # A.
    echo "$@" | awk '{ $1="";$2=""; print substr($0,3) }'

  }

  # III.
  space () {

    # A.
    echo "$@" | sed -re 's/([A-Z])/ &/g' -e 's/^ //'

  }

  # IV.
  parse () {

    # A. Only valid for translation coming from Google
    if [ "$1" = "GoogleTranslation" ]; then

      # I.
      result="$(clean "$@")"

      # II.
      header="$(space "$2")"

      # III.
      notify "$header" "$result"

    fi

  }

# 3. Main block of the program.
{

  # A. Count lines for icons.
  index=1

  # B. Clean off
  left="$(clean "$@")"

  # C. Just a stdin alarm.
  echo "$from $left $word"

  # D. Parse every line.
  LANG=$1 iris "$from $left $word" | while IFS='\n' read -r selected; do

    # 1. Just a stdin alarm.
    echo $selected

    # II. Send notification.
    parse $selected

    # III. Increase for the next icon colour.
    index=$((index + 1))

  done

}

