#!/usr/bin/env sh
#
# Take a screnshot of the user and let them copy to the clipboard through notifications.
#
# DEPENDENCIES:
#   xclip
#   slop
#   copyq
#   notify-call
#
# MAINTAINER: (s)
#   BeyondMagic : 2022- : <koetemagie@gmail.com>

path_image='/tmp/last-shot.png'

# 1. Take the screnshot
{
  if [ "$1" = 'size' ]; then

    # A. Use scrot to take screenshot with position and geometry.
    scrot \
      -a $(slop -f '%x,%y,%w,%h') \
      -f "$path_image" \
      -q 100 \
      -o \
        || exit 1

    size="$(identify -format '%wx%h' $path_image)"

  elif [ "$1" = 'full' ]; then

    # A.
    {
      size=$(xdpyinfo | awk '/dimensions/{print $2}')
      geometry=$(echo "$size" | sed -r 's/x/,/')
    }

    # A.
    scrot \
      -a "0,0,$geometry" \
      -f "$path_image" \
      -q 100 \
      -o \
        || exit 1

  else

    # A. Let the user decides how the screenshot must be taken.
    command=$(notify-call \
                -o 'echo size:Size' \
                -o 'echo full:Fullscreen' \
                '画面' \
                'スクリーンショット？')

    # B. Execute this script again with the argument or just leave if the user wants.
    if [ "$command" ]; then

      # I.
      exec "$0" "$command"

    fi

  fi

}

name="画面 - $size"

# D.
command=$(notify-call \
            --hint string:image-path:"$path_image" \
            -d "echo copy" \
            "$name" \
            'クリップボードにコピーしますか？')

if [ "$command" = 'copy' ]; then

  # I. Transfer the image data to clipboard using copyq.
  copyq write image/png - < "$path_image" \
    && copyq select 0 \
    && notify-call \
         "$name" \
         'コピーえる。'

fi
